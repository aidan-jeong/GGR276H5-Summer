icon = mcIcon,
popup = paste('Mean Center')) %>%
# ADD NEIGHBOURHOODS (HINT: USE 'nbs_sp')
addPolygons(data = nbs_sp,
color='aquamarine',
popup = paste('Neighbourhood:', nbs_sp$neighbourhood))
# PARTS 4, 5, AND 6
# HINT: CLICK THE NEIGHBOURHOOD FOR A POPUP WITH THE NAME OF THE NEIGHBOURHOOD
mc_poi_neighbourhood <- 'Bay Street Corridor'
lowest_airbnb <- criteria_ls %>%
filter(neighbourhood_cleansed == mc_poi_neighbourhood) %>%
filter(total_cost == min(total_cost)) %>%
select(name, total_cost, listing_url)
name_lowest_airbnb <- as.character(lowest_airbnb[,1])
cost_lowest_airbnb <- as.numeric(lowest_airbnb[,2])
listing_url <- as.character(lowest_airbnb[,3])
# install.packages("rtools")
# install.packages("tidyverse")
# install.packages("sf")
# install.packages("lwgeom")
# install.packages("mapboxapi")
# install.packages("leaflet")
# install.packages("reshape2")
# install.packages("geojsonio")
library("tidyverse")
library("sf")
library("lwgeom")
library("mapboxapi")
library("leaflet")
library("reshape2")
library("geojsonio")
listings <- read_csv("toronto-listings.csv")
# install.packages("rtools")
# install.packages("tidyverse")
# install.packages("sf")
# install.packages("lwgeom")
# install.packages("mapboxapi")
# install.packages("leaflet")
# install.packages("reshape2")
# install.packages("geojsonio")
library("tidyverse")
library("sf")
library("lwgeom")
library("mapboxapi")
library("leaflet")
library("reshape2")
library("geojsonio")
listings <- read_csv("toronto-listings.csv")
# install.packages("rtools")
# install.packages("tidyverse")
# install.packages("sf")
# install.packages("lwgeom")
# install.packages("mapboxapi")
# install.packages("leaflet")
# install.packages("reshape2")
# install.packages("geojsonio")
library("tidyverse")
library("sf")
library("lwgeom")
library("mapboxapi")
library("leaflet")
library("reshape2")
library("geojsonio")
listings <- read_csv("toronto-listings.csv")
listings$price <- substring(listings$price, 2, nchar(listings$price)-3) # 1
listings$price <- as.numeric(listings$price) # 2
listings <- listings %>% # 3
mutate(bathrooms = as.numeric(str_split_fixed(listings$bathrooms_text, " b", 2)[,1])) %>% # 4
filter(!is.na(room_type) & room_type == "Entire home/apt") # 5
neighbourhood_cleansed_df <- listings %>%
group_by(neighbourhood_cleansed) %>%
summarise(neighbourhood_cleansed_n = n()) %>%
filter(neighbourhood_cleansed_n == max(neighbourhood_cleansed_n))
name_neighbourhood_cleansed <- as.character(neighbourhood_cleansed_df[,1])
count_neighbourhood_cleansed <- as.numeric(neighbourhood_cleansed_df[,2])
listings <- listings %>%
filter(!(is.na(minimum_nights) | is.na(price))) %>%
mutate(total_cost = price * minimum_nights)
mean_med_total_cost <- listings %>%
filter(minimum_nights <= 3 & bathrooms >= 2) %>%
summarise(mean_total_cost= mean(total_cost),
median_total_cost = median(total_cost)) %>%
round(digits = 1)
mean_total_cost <- as.numeric(mean_med_total_cost[,1])
median_total_cost <- as.numeric(mean_med_total_cost[,2])
iqr_total_cost <- listings %>%
filter(minimum_nights == 1) %>%
summarise(q1_total_cost = quantile(total_cost, 0.25),
q3_total_cost = quantile(total_cost, 0.75)) %>%
mutate(iqr_total_cost = q3_total_cost - q1_total_cost)
listings %>%
filter(minimum_nights == 1) %>%
ggplot(aes(x = 0, y = total_cost)) +
geom_boxplot() +
ylab('Total Cost')
# IMPORT AND CONVERT DATA
ls <- st_as_sf(listings, coords = c("longitude", "latitude"), crs = 4326) # Toronto Airbnb listings, ls = listings spatial
ls <- st_transform(ls, crs = 32617)
nbs <- st_read("toronto-neighbourhoods.geojson", crs = 4326) # Toronto neighbourhoods, nb = neighbourhoods
nbs <- st_transform(nbs, crs = 32617)
nbs_sp <- geojson_read("toronto-neighbourhoods.geojson", what = "sp") # Used for mapping
poi <- st_read("Places-of-Interest-and-Attractions.geojson") # Points of Interest in Toronto, poi = Points of Interest
poi_m <- st_transform(poi, crs = 32617) # poi_m = Points of Interest in meters
# CREATE LAT/LON COLUMNS
ls$coords <- as.character(ls$geometry)
ls$coords <- substring(ls$coords, 3, nchar(ls$coords)-1)
ls <- ls %>%
mutate(longitude_m = as.numeric(str_split_fixed(ls$coords, ", ", 2)[,1]),
latitude_m = as.numeric(str_split_fixed(ls$coords, ", ", 2)[,2]))
poi$coords <- as.character(poi$geometry)
poi$coords <- substring(poi$coords, 3, nchar(poi$coords)-1)
poi <- poi %>%
mutate(longitude = as.numeric(str_split_fixed(poi$coords, ", ", 2)[,1]),
latitude = as.numeric(str_split_fixed(poi$coords, ", ", 2)[,2]))
poi_m$coords <- as.character(poi_m$geometry)
poi_m$coords <- substring(poi_m$coords, 3, nchar(poi_m$coords)-1)
poi_m <- poi_m %>%
mutate(longitude_m = as.numeric(str_split_fixed(poi_m$coords, ", ", 2)[,1]),
latitude_m = as.numeric(str_split_fixed(poi_m$coords, ", ", 2)[,2]))
nbs$coords <- as.character(nbs$geometry)
nbs$coords <- substring(nbs$coords, 3, nchar(nbs$coords)-1)
nbs <- nbs %>%
mutate(longitude = as.numeric(str_split_fixed(nbs$coords, ", ", 2)[,1]),
latitude = as.numeric(str_split_fixed(nbs$coords, ", ", 2)[,2]))
criteria_ls <- listings %>%
filter(minimum_nights <= 5 &
price <= 250 &
bathrooms >= 2 &
accommodates >= 5)
# 1. FILTER THE POINTS OF INTEREST
poi <- poi %>%
filter(CATEGORY == 'Gallery')
# 2. CREATE POINT MARKERS TO MAP YOUR POINTS
# USE ANY MARKERS (i.e., PICTURES OFF THE INTERNET) YOU PLEASE, BUT MAKE SURE YOUR FINAL MAP IS LEGIBLE AND APPROPRIATE
# AIRBNBs
customPoint <- makeIcon(
iconUrl = "https://cdn.discordapp.com/attachments/771483303093600316/864514198809870356/wfwef.png",
iconWidth = 25, iconHeight = 25,
iconAnchorX = 12.5, iconAnchorY = 12.5
)
# ART GALLERIES
artgallery_pts <- makeIcon(
iconUrl = "https://commonculture.org.uk/wp-content/uploads/leaflet-maps-marker-icons/heritage.png",
iconWidth = 30, iconHeight = 30,
iconAnchorX = 15, iconAnchorY = 15
)
# MEAN CENTRE
mcIcon <- makeIcon(
iconUrl = "https://media.discordapp.net/attachments/771483303093600316/864443508311851008/circle-cropped.png",
iconWidth = 40, iconHeight = 40,
iconAnchorX = 20, iconAnchorY = 20
)
# 3. CREATE THE LEAFLET MAP
leaflet() %>%
# ADD MAP LAYER, BASEMAPS http://leaflet-extras.github.io/leaflet-providers/preview/index.html MAKE SURE THEY DO NOT REQUIRE AN API TOKEN
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# SET FIRST VIEW POINT (MAP CENTRE AND ZOOM LEVEL)
setView(lng = mean(criteria_ls$longitude),
lat = mean(criteria_ls$latitude),
zoom = 11.7) %>%
# AIRBNBs (HINT: Use the dataframe from Q9)
addMarkers(lng = criteria_ls$longitude,
lat = criteria_ls$latitude,
icon = customPoint,
popup = paste(sep="<br/>",
paste(criteria_ls$name),
paste('Total cost: $',
paste('<b>',criteria_ls$total_cost,'</b>')))) %>%
# ART GALLERIES
addMarkers(lng = poi$longitude,
lat = poi$latitude,
icon = artgallery_pts,
popup = paste(poi$NAME)) %>%
# MEAN CENTRE
addMarkers(lng = mean(poi$longitude),
lat = mean(poi$latitude),
icon = mcIcon,
popup = paste('Mean Center')) %>%
# ADD NEIGHBOURHOODS (HINT: USE 'nbs_sp')
addPolygons(data = nbs_sp,
color='aquamarine',
popup = paste('Neighbourhood:', nbs_sp$neighbourhood))
# PARTS 4, 5, AND 6
# HINT: CLICK THE NEIGHBOURHOOD FOR A POPUP WITH THE NAME OF THE NEIGHBOURHOOD
mc_poi_neighbourhood <- 'Bay Street Corridor'
lowest_airbnb <- criteria_ls %>%
filter(neighbourhood_cleansed == mc_poi_neighbourhood) %>%
filter(total_cost == min(total_cost)) %>%
select(name, total_cost, listing_url)
name_lowest_airbnb <- as.character(lowest_airbnb[,1])
cost_lowest_airbnb <- as.numeric(lowest_airbnb[,2])
listing_url <- as.character(lowest_airbnb[,3])
# 2. CREATE POINT MARKERS TO MAP YOUR POINTS
# USE ANY MARKERS (i.e., PICTURES OFF THE INTERNET) YOU PLEASE, BUT MAKE SURE YOUR FINAL MAP IS LEGIBLE AND APPROPRIATE
# AIRBNBs
customPoint <- makeIcon(
iconUrl = "https://cdn.discordapp.com/attachments/771483303093600316/864514198809870356/wfwef.png",
iconWidth = 25, iconHeight = 25,
iconAnchorX = 12.5, iconAnchorY = 12.5
)
# install.packages("rtools")
# install.packages("tidyverse")
# install.packages("sf")
# install.packages("lwgeom")
# install.packages("mapboxapi")
# install.packages("leaflet")
# install.packages("reshape2")
# install.packages("geojsonio")
library("tidyverse")
library("sf")
library("lwgeom")
library("mapboxapi")
library("leaflet")
library("reshape2")
library("geojsonio")
listings <- read_csv("toronto-listings.csv")
listings$price <- substring(listings$price, 2, nchar(listings$price)-3) # 1
listings$price <- as.numeric(listings$price) # 2
listings <- listings %>% # 3
mutate(bathrooms = as.numeric(str_split_fixed(listings$bathrooms_text, " b", 2)[,1])) %>% # 4
filter(!is.na(room_type) & room_type == "Entire home/apt") # 5
neighbourhood_cleansed_df <- listings %>%
group_by(neighbourhood_cleansed) %>%
summarise(neighbourhood_cleansed_n = n()) %>%
filter(neighbourhood_cleansed_n == max(neighbourhood_cleansed_n))
name_neighbourhood_cleansed <- as.character(neighbourhood_cleansed_df[,1])
count_neighbourhood_cleansed <- as.numeric(neighbourhood_cleansed_df[,2])
listings <- listings %>%
filter(!(is.na(minimum_nights) | is.na(price))) %>%
mutate(total_cost = price * minimum_nights)
mean_med_total_cost <- listings %>%
filter(minimum_nights <= 3 & bathrooms >= 2) %>%
summarise(mean_total_cost= mean(total_cost),
median_total_cost = median(total_cost)) %>%
round(digits = 1)
mean_total_cost <- as.numeric(mean_med_total_cost[,1])
median_total_cost <- as.numeric(mean_med_total_cost[,2])
iqr_total_cost <- listings %>%
filter(minimum_nights == 1) %>%
summarise(q1_total_cost = quantile(total_cost, 0.25),
q3_total_cost = quantile(total_cost, 0.75)) %>%
mutate(iqr_total_cost = q3_total_cost - q1_total_cost)
listings %>%
filter(minimum_nights == 1) %>%
ggplot(aes(x = 0, y = total_cost)) +
geom_boxplot() +
ylab('Total Cost')
# IMPORT AND CONVERT DATA
ls <- st_as_sf(listings, coords = c("longitude", "latitude"), crs = 4326) # Toronto Airbnb listings, ls = listings spatial
ls <- st_transform(ls, crs = 32617)
nbs <- st_read("toronto-neighbourhoods.geojson", crs = 4326) # Toronto neighbourhoods, nb = neighbourhoods
nbs <- st_transform(nbs, crs = 32617)
nbs_sp <- geojson_read("toronto-neighbourhoods.geojson", what = "sp") # Used for mapping
poi <- st_read("Places-of-Interest-and-Attractions.geojson") # Points of Interest in Toronto, poi = Points of Interest
poi_m <- st_transform(poi, crs = 32617) # poi_m = Points of Interest in meters
# CREATE LAT/LON COLUMNS
ls$coords <- as.character(ls$geometry)
ls$coords <- substring(ls$coords, 3, nchar(ls$coords)-1)
ls <- ls %>%
mutate(longitude_m = as.numeric(str_split_fixed(ls$coords, ", ", 2)[,1]),
latitude_m = as.numeric(str_split_fixed(ls$coords, ", ", 2)[,2]))
poi$coords <- as.character(poi$geometry)
poi$coords <- substring(poi$coords, 3, nchar(poi$coords)-1)
poi <- poi %>%
mutate(longitude = as.numeric(str_split_fixed(poi$coords, ", ", 2)[,1]),
latitude = as.numeric(str_split_fixed(poi$coords, ", ", 2)[,2]))
poi_m$coords <- as.character(poi_m$geometry)
poi_m$coords <- substring(poi_m$coords, 3, nchar(poi_m$coords)-1)
poi_m <- poi_m %>%
mutate(longitude_m = as.numeric(str_split_fixed(poi_m$coords, ", ", 2)[,1]),
latitude_m = as.numeric(str_split_fixed(poi_m$coords, ", ", 2)[,2]))
nbs$coords <- as.character(nbs$geometry)
nbs$coords <- substring(nbs$coords, 3, nchar(nbs$coords)-1)
nbs <- nbs %>%
mutate(longitude = as.numeric(str_split_fixed(nbs$coords, ", ", 2)[,1]),
latitude = as.numeric(str_split_fixed(nbs$coords, ", ", 2)[,2]))
criteria_ls <- listings %>%
filter(minimum_nights <= 5 &
price <= 250 &
bathrooms >= 2 &
accommodates >= 5)
# 1. FILTER THE POINTS OF INTEREST
poi <- poi %>%
filter(CATEGORY == 'Gallery')
# 2. CREATE POINT MARKERS TO MAP YOUR POINTS
# USE ANY MARKERS (i.e., PICTURES OFF THE INTERNET) YOU PLEASE, BUT MAKE SURE YOUR FINAL MAP IS LEGIBLE AND APPROPRIATE
# AIRBNBs
customPoint <- makeIcon(
iconUrl = "https://cdn.discordapp.com/attachments/771483303093600316/864514198809870356/wfwef.png",
iconWidth = 25, iconHeight = 25,
iconAnchorX = 12.5, iconAnchorY = 12.5
)
# ART GALLERIES
artgallery_pts <- makeIcon(
iconUrl = "https://commonculture.org.uk/wp-content/uploads/leaflet-maps-marker-icons/heritage.png",
iconWidth = 30, iconHeight = 30,
iconAnchorX = 15, iconAnchorY = 15
)
# MEAN CENTRE
mcIcon <- makeIcon(
iconUrl = "https://media.discordapp.net/attachments/771483303093600316/864443508311851008/circle-cropped.png",
iconWidth = 40, iconHeight = 40,
iconAnchorX = 20, iconAnchorY = 20
)
# 3. CREATE THE LEAFLET MAP
leaflet() %>%
# ADD MAP LAYER, BASEMAPS http://leaflet-extras.github.io/leaflet-providers/preview/index.html MAKE SURE THEY DO NOT REQUIRE AN API TOKEN
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# SET FIRST VIEW POINT (MAP CENTRE AND ZOOM LEVEL)
setView(lng = mean(criteria_ls$longitude),
lat = mean(criteria_ls$latitude),
zoom = 11.7) %>%
# AIRBNBs (HINT: Use the dataframe from Q9)
addMarkers(lng = criteria_ls$longitude,
lat = criteria_ls$latitude,
icon = customPoint,
popup = paste(sep="<br/>",
paste(criteria_ls$name),
paste('Total cost: $',
paste('<b>',criteria_ls$total_cost,'</b>')))) %>%
# ART GALLERIES
addMarkers(lng = poi$longitude,
lat = poi$latitude,
icon = artgallery_pts,
popup = paste(poi$NAME)) %>%
# MEAN CENTRE
addMarkers(lng = mean(poi$longitude),
lat = mean(poi$latitude),
icon = mcIcon,
popup = paste('Mean Center')) %>%
# ADD NEIGHBOURHOODS (HINT: USE 'nbs_sp')
addPolygons(data = nbs_sp,
color='aquamarine',
popup = paste('Neighbourhood:', nbs_sp$neighbourhood))
# PARTS 4, 5, AND 6
# HINT: CLICK THE NEIGHBOURHOOD FOR A POPUP WITH THE NAME OF THE NEIGHBOURHOOD
mc_poi_neighbourhood <- 'Bay Street Corridor'
lowest_airbnb <- criteria_ls %>%
filter(neighbourhood_cleansed == mc_poi_neighbourhood) %>%
filter(total_cost == min(total_cost)) %>%
select(name, total_cost, listing_url)
name_lowest_airbnb <- as.character(lowest_airbnb[,1])
cost_lowest_airbnb <- as.numeric(lowest_airbnb[,2])
listing_url <- as.character(lowest_airbnb[,3])
View(criteria_ls)
View(criteria_ls)
new <- criteria_ls %>%
filter(neighbourhood_cleansed == "Bay Street Corridor")
View(new)
# install.packages("rtools")
# install.packages("tidyverse")
# install.packages("sf")
# install.packages("lwgeom")
# install.packages("mapboxapi")
# install.packages("leaflet")
# install.packages("reshape2")
# install.packages("geojsonio")
library("tidyverse")
library("sf")
library("lwgeom")
library("mapboxapi")
library("leaflet")
library("reshape2")
library("geojsonio")
listings <- read_csv("toronto-listings.csv")
listings$price <- substring(listings$price, 2, nchar(listings$price)-3) # 1
listings$price <- as.numeric(listings$price) # 2
listings <- listings %>% # 3
mutate(bathrooms = as.numeric(str_split_fixed(listings$bathrooms_text, " b", 2)[,1])) %>% # 4
filter(!is.na(room_type) & room_type == "Entire home/apt") # 5
neighbourhood_cleansed_df <- listings %>%
group_by(neighbourhood_cleansed) %>%
summarise(neighbourhood_cleansed_n = n()) %>%
filter(neighbourhood_cleansed_n == max(neighbourhood_cleansed_n))
name_neighbourhood_cleansed <- as.character(neighbourhood_cleansed_df[,1])
count_neighbourhood_cleansed <- as.numeric(neighbourhood_cleansed_df[,2])
listings <- listings %>%
filter(!(is.na(minimum_nights) | is.na(price))) %>%
mutate(total_cost = price * minimum_nights)
mean_med_total_cost <- listings %>%
filter(minimum_nights <= 3 & bathrooms >= 2) %>%
summarise(mean_total_cost= mean(total_cost),
median_total_cost = median(total_cost)) %>%
round(digits = 1)
mean_total_cost <- as.numeric(mean_med_total_cost[,1])
median_total_cost <- as.numeric(mean_med_total_cost[,2])
iqr_total_cost <- listings %>%
filter(minimum_nights == 1) %>%
summarise(q1_total_cost = quantile(total_cost, 0.25),
q3_total_cost = quantile(total_cost, 0.75)) %>%
mutate(iqr_total_cost = q3_total_cost - q1_total_cost)
listings %>%
filter(minimum_nights == 1) %>%
ggplot(aes(x = 0, y = total_cost)) +
geom_boxplot() +
ylab('Total Cost')
# IMPORT AND CONVERT DATA
ls <- st_as_sf(listings, coords = c("longitude", "latitude"), crs = 4326) # Toronto Airbnb listings, ls = listings spatial
ls <- st_transform(ls, crs = 32617)
nbs <- st_read("toronto-neighbourhoods.geojson", crs = 4326) # Toronto neighbourhoods, nb = neighbourhoods
nbs <- st_transform(nbs, crs = 32617)
nbs_sp <- geojson_read("toronto-neighbourhoods.geojson", what = "sp") # Used for mapping
poi <- st_read("Places-of-Interest-and-Attractions.geojson") # Points of Interest in Toronto, poi = Points of Interest
poi_m <- st_transform(poi, crs = 32617) # poi_m = Points of Interest in meters
# CREATE LAT/LON COLUMNS
ls$coords <- as.character(ls$geometry)
ls$coords <- substring(ls$coords, 3, nchar(ls$coords)-1)
ls <- ls %>%
mutate(longitude_m = as.numeric(str_split_fixed(ls$coords, ", ", 2)[,1]),
latitude_m = as.numeric(str_split_fixed(ls$coords, ", ", 2)[,2]))
poi$coords <- as.character(poi$geometry)
poi$coords <- substring(poi$coords, 3, nchar(poi$coords)-1)
poi <- poi %>%
mutate(longitude = as.numeric(str_split_fixed(poi$coords, ", ", 2)[,1]),
latitude = as.numeric(str_split_fixed(poi$coords, ", ", 2)[,2]))
poi_m$coords <- as.character(poi_m$geometry)
poi_m$coords <- substring(poi_m$coords, 3, nchar(poi_m$coords)-1)
poi_m <- poi_m %>%
mutate(longitude_m = as.numeric(str_split_fixed(poi_m$coords, ", ", 2)[,1]),
latitude_m = as.numeric(str_split_fixed(poi_m$coords, ", ", 2)[,2]))
nbs$coords <- as.character(nbs$geometry)
nbs$coords <- substring(nbs$coords, 3, nchar(nbs$coords)-1)
nbs <- nbs %>%
mutate(longitude = as.numeric(str_split_fixed(nbs$coords, ", ", 2)[,1]),
latitude = as.numeric(str_split_fixed(nbs$coords, ", ", 2)[,2]))
criteria_ls <- listings %>%
filter(minimum_nights <= 5 &
price <= 250 &
bathrooms >= 2 &
accommodates >= 5)
# 1. FILTER THE POINTS OF INTEREST
poi <- poi %>%
filter(CATEGORY == 'Gallery')
# 2. CREATE POINT MARKERS TO MAP YOUR POINTS
# USE ANY MARKERS (i.e., PICTURES OFF THE INTERNET) YOU PLEASE, BUT MAKE SURE YOUR FINAL MAP IS LEGIBLE AND APPROPRIATE
# AIRBNBs
customPoint <- makeIcon(
iconUrl = "https://cdn.discordapp.com/attachments/771483303093600316/864514198809870356/wfwef.png",
iconWidth = 25, iconHeight = 25,
iconAnchorX = 12.5, iconAnchorY = 12.5
)
# ART GALLERIES
artgallery_pts <- makeIcon(
iconUrl = "https://commonculture.org.uk/wp-content/uploads/leaflet-maps-marker-icons/heritage.png",
iconWidth = 30, iconHeight = 30,
iconAnchorX = 15, iconAnchorY = 15
)
# MEAN CENTRE
mcIcon <- makeIcon(
iconUrl = "https://media.discordapp.net/attachments/771483303093600316/864443508311851008/circle-cropped.png",
iconWidth = 40, iconHeight = 40,
iconAnchorX = 20, iconAnchorY = 20
)
# 3. CREATE THE LEAFLET MAP
leaflet() %>%
# ADD MAP LAYER, BASEMAPS http://leaflet-extras.github.io/leaflet-providers/preview/index.html MAKE SURE THEY DO NOT REQUIRE AN API TOKEN
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# SET FIRST VIEW POINT (MAP CENTRE AND ZOOM LEVEL)
setView(lng = mean(criteria_ls$longitude),
lat = mean(criteria_ls$latitude),
zoom = 11.7) %>%
# AIRBNBs (HINT: Use the dataframe from Q9)
addMarkers(lng = criteria_ls$longitude,
lat = criteria_ls$latitude,
icon = customPoint,
popup = paste(sep="<br/>",
paste(criteria_ls$name),
paste('Total cost: $',
paste('<b>',criteria_ls$total_cost,'</b>')))) %>%
# ART GALLERIES
addMarkers(lng = poi$longitude,
lat = poi$latitude,
icon = artgallery_pts,
popup = paste(poi$NAME)) %>%
# MEAN CENTRE
addMarkers(lng = mean(poi$longitude),
lat = mean(poi$latitude),
icon = mcIcon,
popup = paste('Mean Center')) %>%
# ADD NEIGHBOURHOODS (HINT: USE 'nbs_sp')
addPolygons(data = nbs_sp,
color='aquamarine',
popup = paste('Neighbourhood:', nbs_sp$neighbourhood))
# PARTS 4, 5, AND 6
# HINT: CLICK THE NEIGHBOURHOOD FOR A POPUP WITH THE NAME OF THE NEIGHBOURHOOD
mc_poi_neighbourhood <- 'Bay Street Corridor'
lowest_airbnb <- criteria_ls %>%
filter(neighbourhood_cleansed == mc_poi_neighbourhood) %>%
filter(total_cost == min(total_cost)) %>%
select(name, total_cost, listing_url)
name_lowest_airbnb <- as.character(lowest_airbnb[,1])
cost_lowest_airbnb <- as.numeric(lowest_airbnb[,2])
listing_url <- as.character(lowest_airbnb[,3])
(8255.0421^2/20)
480/500
3407286*0.96
500^2
3270995*250000
sqrt(817748750000)
2*904294.6
8255.0421/20
480/500
412.7521*.96
500^2*396.242
sqrt(99060500)
2*9952.914
8255.0421/20
480/500
412.7521*0.96
2*sqrt(396.242)
197.1-39.81166
197.1+39.81166
